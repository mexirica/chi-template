// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movie.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
    title, description, release_year, genre, director, rating
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, title, description, release_year, genre, director, rating
`

type CreateMovieParams struct {
	Title       string         `json:"title"`
	Description pgtype.Text    `json:"description"`
	ReleaseYear int32          `json:"release_year"`
	Genre       []string       `json:"genre"`
	Director    pgtype.Text    `json:"director"`
	Rating      pgtype.Numeric `json:"rating"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.Title,
		arg.Description,
		arg.ReleaseYear,
		arg.Genre,
		arg.Director,
		arg.Rating,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseYear,
		&i.Genre,
		&i.Director,
		&i.Rating,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const getMovieByID = `-- name: GetMovieByID :one
SELECT id, title, description, release_year, genre, director, rating FROM movies WHERE id = $1
`

func (q *Queries) GetMovieByID(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovieByID, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseYear,
		&i.Genre,
		&i.Director,
		&i.Rating,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, description, release_year, genre, director, rating FROM movies ORDER BY id DESC LIMIT $1 OFFSET $2
`

type ListMoviesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Movie{}
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ReleaseYear,
			&i.Genre,
			&i.Director,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies SET
    title = $2,
    description = $3,
    release_year = $4,
    genre = $5,
    director = $6,
    rating = $7
WHERE id = $1
RETURNING id, title, description, release_year, genre, director, rating
`

type UpdateMovieParams struct {
	ID          int64          `json:"id"`
	Title       string         `json:"title"`
	Description pgtype.Text    `json:"description"`
	ReleaseYear int32          `json:"release_year"`
	Genre       []string       `json:"genre"`
	Director    pgtype.Text    `json:"director"`
	Rating      pgtype.Numeric `json:"rating"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.ReleaseYear,
		arg.Genre,
		arg.Director,
		arg.Rating,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseYear,
		&i.Genre,
		&i.Director,
		&i.Rating,
	)
	return i, err
}
